# üìö Semana 5 ‚Äì Rede e Estrutura Multiplayer

### üéØ Objetivo da semana
- [ ] Entender como funciona o **multiplayer no JM** usando **SpiderMonkey**
- [ ] Montar arquitetura **cliente-servidor autoritativa**
- [ ] Sincronizar m√∫ltiplos jogadores no mesmo mapa (representa√ß√£o simples)

---

## **Dia 1 ‚Äì Configura√ß√£o de Rede**
- [ ] Instalar/configurar **SpiderMonkey** no projeto JM
- [ ] Estudar classes principais: `Server`, `Client`, `Message`
- [ ] Registrar mensagens customizadas (posi√ß√£o do player, chat, etc.)
- [ ] Exerc√≠cio: criar servidor que recebe mensagem de "Hello" de um cliente

---

## **Dia 2 ‚Äì Sincroniza√ß√£o de Players (Simples)**
- [ ] Criar classe `PlayerData` (id, posi√ß√£o x,y,z)
- [ ] Cliente envia posi√ß√£o do player para o servidor periodicamente
- [ ] Servidor retransmite posi√ß√µes para todos os clientes
- [ ] Exerc√≠cio: cada cliente controla um cubo, outros veem o movimento

---

## **Dia 3 ‚Äì Arquitetura Cliente-Servidor**
- [ ] Estudar diferen√ßa: servidor autoritativo x cliente preditivo
- [ ] Implementar servidor simples que retransmite posi√ß√µes
- [ ] Exerc√≠cio: Player A anda ‚Üí Player B v√™ movimento em tempo real

---

## **Dia 4 ‚Äì Gerenciamento de M√∫ltiplos Players**
- [ ] Criar mapa `playerId -> Spatial` no cliente
- [ ] Novo player conecta ‚Üí adicionar cubo na cena
- [ ] Player desconecta ‚Üí remover cubo
- [ ] Exerc√≠cio: abrir 3 clientes e todos veem os cubos se mexendo

---

## **Dia 5 ‚Äì Otimiza√ß√µes Iniciais**
- [ ] Enviar posi√ß√£o apenas quando houver movimento
- [ ] Implementar interpola√ß√£o para suavizar movimentos
- [ ] Limitar taxa de envio para 20 pacotes/s
- [ ] Exerc√≠cio: simular lag e suavizar movimento recebido

---

## **Dia 6 ‚Äì Modulariza√ß√£o da Rede (AppState)**
- [ ] Criar `NetworkAppState` para encapsular l√≥gica de rede
- [ ] Separar fun√ß√µes: conectar, enviar update, processar mensagem
- [ ] Exerc√≠cio: gerenciar conex√£o e desconex√£o via AppState

---

## **Dia 7 ‚Äì Mini-projeto: Multiplayer Simples**
- [ ] Servidor aceita m√∫ltiplos clientes
- [ ] Cada cliente controla um cubo sincronizado
- [ ] Entradas/sa√≠das de players s√£o atualizadas em todos
- [ ] Resultado esperado: **prot√≥tipo multiplayer b√°sico** rodando
