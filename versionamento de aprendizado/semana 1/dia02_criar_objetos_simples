package me.brzeph;

import com.jme3.app.SimpleApplication;
import com.jme3.light.AmbientLight;
import com.jme3.light.DirectionalLight;
import com.jme3.material.Material;
import com.jme3.math.ColorRGBA;
import com.jme3.math.Vector3f;
import com.jme3.scene.Geometry;
import com.jme3.scene.debug.WireBox;
import com.jme3.scene.shape.Box;
import com.jme3.scene.shape.Sphere;

public class Test_01 extends SimpleApplication {

    private float acc = 0f;

    @Override
    public void simpleInitApp() {
        // 1) cor de fundo da janela
//        viewPort.setBackgroundColor(new ColorRGBA(0.11f, 0.11f, 0.12f, 1f));
        viewPort.setBackgroundColor(ColorRGBA.Black);

        // 2) câmera: posição e direção
        cam.setLocation(new Vector3f(6, 4, 10));
        cam.lookAt(new Vector3f(0, 1, 0), Vector3f.UNIT_Y);
        flyCam.setMoveSpeed(8f); // velocidade da câmera livre

        // 3) LUZES (necessárias p/ materiais do tipo Lighting)
        AmbientLight amb = new AmbientLight();
        amb.setColor(ColorRGBA.White.mult(0.25f)); // luz ambiente fraquinha
        rootNode.addLight(amb);

        DirectionalLight sun = new DirectionalLight();
        sun.setColor(ColorRGBA.White);
        sun.setDirection(new Vector3f(-1, -1, -0.5f).normalizeLocal()); // "sol" vindo de cima/esquerda
        rootNode.addLight(sun);

        // 4) CHÃO (Box grande) com material Lighting
        Box floorMesh = new Box(6f, 0.1f, 6f); // Dimensões.
        Geometry floor = new Geometry("Floor", floorMesh);
        Material floorMat = new Material(assetManager, "Common/MatDefs/Light/Lighting.j3md");
        floorMat.setBoolean("UseMaterialColors", true);
        floorMat.setColor("Diffuse",  ColorRGBA.LightGray);     // cor de quando bate luz
        floorMat.setColor("Ambient",  ColorRGBA.Black);   // regula o quanto da cor difusa é visível mesmo na sombra
        floorMat.setColor("Specular", ColorRGBA.Red);     // brilho especular quando bate a luz
        floorMat.setFloat("Shininess", 8f);         // tamanho do brilho
        floor.setMaterial(floorMat);
        floor.setLocalTranslation(0, -0.1f, 0); // Posição.
        rootNode.attachChild(floor);

        // 5) CUBO com material Unshaded (não reage à luz)
        Box cubeMesh = new Box(0.75f, 0.75f, 0.75f);
        Geometry cube = new Geometry("Cube", cubeMesh);
        Material unshaded = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
        unshaded.setColor("Color", ColorRGBA.Orange);
        cube.setMaterial(unshaded);
        cube.setLocalTranslation(-2f, 0.75f, 0f);
        rootNode.attachChild(cube);
        // contorno do cubo com WireBox mais detalhes no fim do arquivo.
        WireBox edgesMesh = new WireBox(0.75f, 0.75f, 0.75f);
        Geometry edges = new Geometry("CubeEdges", edgesMesh);
        Material lineMat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
        lineMat.setColor("Color", ColorRGBA.Black);
        lineMat.getAdditionalRenderState().setLineWidth(2); // engrossa as linhas
        edges.setMaterial(lineMat);
        edges.setLocalTranslation(cube.getLocalTranslation());
        rootNode.attachChild(edges);

        // cubo fosco (plástico opaco)
        Geometry cubeFosco = createCube("Fosco", ColorRGBA.Orange, ColorRGBA.White, 2f, new Vector3f(-4, 1, 0));
        cubeFosco.getMaterial().setFloat("Shininess", 4f); // brilho espalhado e suave
        // cubo metálico polido
        Geometry cubeMetal = createCube("Metal", ColorRGBA.Gray, ColorRGBA.White, 32f, new Vector3f(0, 1, 0));
        cubeMetal.getMaterial().setColor("Specular", ColorRGBA.Cyan); // brilho azulado
        cubeMetal.getMaterial().setFloat("Shininess", 64f); // brilho pequeno e intenso
        // cubo plástico brilhante
        Geometry cubePlastico = createCube("Plástico", ColorRGBA.Blue, ColorRGBA.White, 16f, new Vector3f(4, 1, 0));
        cubePlastico.getMaterial().setFloat("Shininess", 16f);
        rootNode.attachChild(cubeFosco);
        rootNode.attachChild(cubeMetal);
        rootNode.attachChild(cubePlastico);

        // 6) ESFERA com material Lighting (reage à luz)
        Sphere sphMesh = new Sphere(32, 32, 0.9f);
        Geometry sphere = new Geometry("Sphere", sphMesh);
        Material shiny = new Material(assetManager, "Common/MatDefs/Light/Lighting.j3md");
        shiny.setBoolean("UseMaterialColors", true);
        shiny.setColor("Diffuse", new ColorRGBA(0.1f, 0.55f, 0.95f, 1f)); // azul
        shiny.setColor("Ambient", new ColorRGBA(0.05f, 0.2f, 0.4f, 1f));
        shiny.setColor("Specular", ColorRGBA.White);
        shiny.setFloat("Shininess", 32f); // mais "polida"
        sphere.setMaterial(shiny);
        sphere.setLocalTranslation(2f, 0.9f, 0f);
        rootNode.attachChild(sphere);
    }

    @Override
    public void simpleUpdate(float tpf) {
        // chamado a cada frame (tpf = time per frame)
        // lógica de jogo/movimento contínuo entra aqui
        // imprime a cada ~1s
        acc += tpf;
        if (acc >= 1f) {
            System.out.println("Rodando... FPS ~ " + (int)(1f / tpf));
            acc = 0f;
        }
    }

    @Override
    public void stop() {
        // chamado ao fechar. liberar recursos se precisar
        super.stop();
    }

    private Geometry createCube(String name, ColorRGBA diffuse, ColorRGBA specular, float shininess, Vector3f pos) {
        Box mesh = new Box(1f, 1f, 1f);
        Geometry geom = new Geometry(name, mesh);

        Material mat = new Material(assetManager, "Common/MatDefs/Light/Lighting.j3md");
        mat.setBoolean("UseMaterialColors", true);
        mat.setColor("Diffuse", diffuse);    // cor principal
        mat.setColor("Ambient", diffuse.mult(0.3f)); // cor na sombra
        mat.setColor("Specular", specular); // cor do brilho
        mat.setFloat("Shininess", shininess);

        geom.setMaterial(mat);
        geom.setLocalTranslation(pos);
        return geom;
    }
}
/*
    Alternativa para edgesMesh do cubo:
        o "problema" é que é global.
            FilterPostProcessor fpp = new FilterPostProcessor(assetManager);
            CartoonEdgeFilter edge = new CartoonEdgeFilter(); // edge.setEdgeWidth(1.5f); edge.setEdgeIntensity(1f);
            fpp.addFilter(edge);
            viewPort.addProcessor(fpp);
 */